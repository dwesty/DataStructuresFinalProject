
The sorted strings are read from the input and stored in an array list. This list is iterated through and each word is compared to the word before it. Every pair of words must have some difference that results in one word having precedence over the other, by comparing letter by letter until some letter differs (The case where two words are identical but one is longer than the other produces no new information and is thus ignored). This is modeled using a digraph with an edge off of one vertex and onto another represents precedence of the incident vertex to the receiving vertex. A hash map (in the digraph wrapper class) maps the symbols to their numerical representation (the digraph class). Once the words has been parsed for their precedence information, a topological sort is performed on the digraph, and a linked list of the symbols in their “alphabetical order” is produced. The unsorted text file is read into an array list and wrapped by the “string wrapper” class which provides a compareTo function using the precedence linked list. This is then sorted and printed to the sorted text file. 

The time complexity of this program is dominated by the time necessary to create the topological sort and the time needed to sort the unsorted words. Since the linked list has a maximum of 26 elements, looking up precedence is O(1). Adding to the graph is O(1) and checking the edges that belong to a vertex is O(di) where di is the number of edges a vertex has. Since there is a maximum of 26, this is also quite fast. The sorting of the array list is nlogn where n is the amount of words to be sorted, and this provides the biggest asymptotic contribution to the running time of the algorithm. 