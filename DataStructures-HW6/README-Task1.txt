In Task 1 the goal is to find the shortest distance network that hits all points. First, the input is read into the main program, coordinates parsed, and a graph setup. We used a GraphWrapper class that wrapped AdjacencyListGraph. The class included methods for adding weighted, undirected edges and for finding attributes of the graph, essentially allowing higher-level access to the underlying adjacency list structure. Note that vertices were mapped down a dimension from (x, y) coordinates to single Integer coordinates encoded and decoded by a simple function.To find the least-work network, a Minimum Spanning Tree was constructed. The PrimMST class was written to provide an algorithm for finding the MST from a starting vertex. Thus, to find the optimized network, the MST was calculated on the graph N times where N is the number of vertices (each vertex seeding the graph once). A method was written in AdjacencyListGraph that allowed for the calculation of the total map weight. The weights for each tree were compared and the shortest MST was selected. The edges on the network from the tree were then transformed back into (x, y) coordinate space and outputted according to the specification along with the total graph weight. It is worth noting that it seems the algorithm for selecting the smallest MST was slightly off. Namely, the outputs match up well in terms of format, but were slightly off both test output scenarios. Future versions of this program would consider precisely what was causing the output discrepancy.